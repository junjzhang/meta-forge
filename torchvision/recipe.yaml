context:
  name: "torchvision"
  git_url: https://github.com/pytorch/vision.git
  git_tag: "v0.19.1"
  # git_tag: ${{ git.latest_tag( git_url ) }}

package:
  name: ${{ name }}
  version: ${{ git_tag[1:] }}

source:
  - git: ${{ git_url }}
    tag: ${{ git_tag }}

build:
  number: ${{ build|int + (microarch_level|int) * 100 + 1 }}
  string: py${{ python | version_to_buildstring }}_cuda${{ cuda | version_to_buildstring }}_pt${{ pytorch | replace('.', '') }}
  dynamic_linking:
    missing_dso_allowlist: ["libc10*", "libtorch*"]
  script:
    - export CUDA_HOME=$PREFIX
    - $CUDA_HOME/bin/nvcc -V
    - export MAX_JOBS=$(expr $CPU_COUNT - 16)
    - export FORCE_CUDA=1
    - export TORCH_CUDA_ARCH_LIST="8.0+PTX 9.0+PTX"
    - pip install . -vvv --global-option="build_ext" --global-option="-j$MAX_JOBS"

requirements:
  build:
    - if: microarch_level|int > 0
      then: x86_64-microarch-level ${{ microarch_level }}
    - ${{ compiler('c') }}
    - ${{ compiler('cxx') }}
    # - ${{ compiler('cuda') }}
    - ${{ stdlib('c') }}
    - ninja
    - cmake

  host:
    # variant
    - cuda
    - cuda-driver-dev ${{ cuda }}
    - pytorch-cuda ${{ cuda }}
    - pytorch
    - python-ninja
    - python
    # - ninja
    # host:
    - pip
    - libpng
    - libjpeg-turbo
    - libwebp

  run:
    - pytorch
    - pillow
    - numpy
    - libpng
    - libjpeg-turbo
    - libwebp
    - fsspec

  ignore_run_exports:
    from_package:
      - sysroot_${{ target_platform }}

tests:
  - python:
      imports:
        - torchvision
        - torchvision.datasets
        - torchvision.transforms
